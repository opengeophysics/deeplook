language: generic

sudo: false

branches:
    only:
        - master
        # Regex to build tagged commits with version numbers
        - /\d+\.\d+(\.\d+)?(\S*)?$/

env:
    global:
        # CODACY_PROJECT_TOKEN to upload coverage to codacy
        # Github Token for pushing the built docs (GH_TOKEN)
        # TWINE_PASSWORD to deploy to PyPI
        - TWINE_USERNAME=Leonardo.Uieda
        - LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH
        - COVERAGE=false
        - BUILD_DOCS=false
        - DEPLOY_DOCS=false
        - DEPLOY_PYPI=false
        - CONDA_FLAGS="-c conda-forge --yes --quiet"

matrix:
    # Build under the following configurations
    include:
        - os: linux
          env:
              - PYTHON=3.5
        - os: linux
          env:
              - PYTHON=3.6
              - COVERAGE=true
        - os: linux
          env:
              - PYTHON=2.7
              - COVERAGE=true
              - BUILD_DOCS=true
              - DEPLOY_DOCS=true
              - DEPLOY_PYPI=true

before_install:
    # Get Miniconda from Continuum
    # Need to source the script to set the PATH variable in this environment
    # (not the scripts environment)
    - source ci/install-miniconda.sh
    - conda update conda $CONDA_FLAGS
    # Install dependencies
    - conda install python=$PYTHON pip $CONDA_FLAGS
    - conda install --file requirements-dev.txt $CONDA_FLAGS
    - conda install --file requirements.txt $CONDA_FLAGS
    - if [ "$COVERAGE" == "true" ]; then
        pip install codecov codacy-coverage codeclimate-test-reporter;
      fi
    # Show installed pkg information for postmortem diagnostic
    - conda list

install:
    # Package and install
    - python setup.py bdist_wheel
    - pip install dist/*

script:
    # Check code for PEP8 style and lint for code quality
    - make pep8
    - make lint
    # Run the test suite
    - if [ "$COVERAGE" == "true" ]; then
        make coverage;
      else
        make test;
      fi
    # Build the documentation
    - if [ "$BUILD_DOCS" == "true" ]; then
        make -C doc all;
      fi

after_success:
    - if [ "$COVERAGE" == "true" ]; then
        echo "Uploading coverage to Codecov";
        codecov -e PYTHON;
        coverage xml;
        echo "Uploading coverage to Codacy";
        python-codacy-coverage -r coverage.xml;
        echo "Uploading coverage to Code Climate";
        codeclimate-test-reporter;
      fi

deploy:
    # Push the built docs to Github pages
    - provider: script
      script: ci/deploy-docs.sh
      skip_cleanup: true
      on:
          branch: master
          condition: '$DEPLOY_DOCS == "true"'
    # Push docs when building tags as well
    - provider: script
      script: ci/deploy-docs.sh
      skip_cleanup: true
      on:
          tags: true
          condition: '$DEPLOY_DOCS == "true"'
    # Make a release on PyPI
    - provider: script
      script: ci/deploy-pypi.sh
      on:
          tags: true
          condition: '$DEPLOY_PYPI == "true"'

notifications:
    email: false
